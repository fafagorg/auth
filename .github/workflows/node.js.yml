# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI Test, coverage and linting and CD build and push to Docker Hub

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
        mongodb-version: [4.4]
        redis-version: [6]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Start MongoDB
      uses: supercharge/mongodb-github-action@1.3.0
      with:
        mongodb-version: ${{ matrix.mongodb-version }}
    - name: Start Redis
      uses: supercharge/redis-github-action@1.2.0
      with:
        redis-version: ${{ matrix.redis-version }}
    - name: Install dependencies 
      run: npm ci
    - name: Check syntax
      run: npm run lint
      env:
        CI: true
    - name: Run tests
      run: npm run test
      env:
        CI: true
    - name: Generate coverage report
      run: npm run coverageReport
      env:
        CI: true  
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1.0.14
      with:
        token: ${{secrets.CODECOV_TOKEN}}
      env:
        CI: true
  buildProd:
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push'}}
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: fafagoauth/auth:latest
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}  
  buildTest:
    if: ${{ github.ref == 'refs/heads/develop' && github.event_name == 'push' }}
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: fafagoauth/auth:test
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  gCloudDeployment-Dev:
    if: ${{ github.ref == 'refs/heads/dev' && github.event_name == 'push'}}
    name: Deploy DEVELOPMENT code automatically to google cloud
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    needs: buildTest
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.2
      - name: Deploy in Kubernetes
        env:
          GCLOUD_API_KEY: "${{ secrets.GCLOUD_API_KEY }}"
          CLOUDINARY_API_SECRET_B64: "${{ secrets.CLOUDINARY_API_SECRET_B64 }}"
          CLOUDINARY_API_KEY_B64: "${{ secrets.CLOUDINARY_API_KEY_B64 }}"
        run: |
          export DOCKER_IMAGES=fafagoauth/auth:test
          export BRANCH_NAME=develop
          echo $(ls)
          /usr/bin/envsubst < ./k8s/deployment-$BRANCH_NAME.tmp.yaml > ./k8s/deployment.yaml
          /usr/bin/envsubst < ./k8s/service.tmp.yaml > ./k8s/service.yaml
          echo "$GCLOUD_API_KEY" > account.json
          gcloud auth activate-service-account fis-deploy@fis-us.iam.gserviceaccount.com --key-file=account.json
          gcloud container clusters get-credentials cluster-1 --zone europe-west1-b --project fis-us
          kubectl apply -f ./k8s/deployment.yaml
          kubectl apply -f ./k8s/service.yaml
          kubectl rollout status deployment.apps/auth-$BRANCH_NAME -n app
  gCloudDeployment-Prod:
    if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push'}}
    name: Deploy PRODUCTION code automatically to google cloud
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    needs: buildProd
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.2
      - name: Deploy in Kubernetes
        env:
          GCLOUD_API_KEY: "${{ secrets.GCLOUD_API_KEY }}"
          CLOUDINARY_API_SECRET_B64: "${{ secrets.CLOUDINARY_API_SECRET_B64 }}"
          CLOUDINARY_API_KEY_B64: "${{ secrets.CLOUDINARY_API_KEY_B64 }}"
        run: |
          export DOCKER_IMAGES=fafagoauth/auth:latest
          export BRANCH_NAME=main
          echo $(ls)
          /usr/bin/envsubst < ./k8s/deployment-$BRANCH_NAME.tmp.yaml > ./k8s/deployment.yaml
          /usr/bin/envsubst < ./k8s/service.tmp.yaml > ./k8s/service.yaml
          echo "$GCLOUD_API_KEY" > account.json
          gcloud auth activate-service-account fis-deploy@fis-us.iam.gserviceaccount.com --key-file=account.json
          gcloud container clusters get-credentials cluster-1 --zone europe-west1-b --project fis-us
          kubectl apply -f ./k8s/deployment.yaml
          kubectl apply -f ./k8s/service.yaml
          kubectl rollout status deployment.apps/auth-$BRANCH_NAME -n app

